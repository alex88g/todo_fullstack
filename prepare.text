Komplett arbetsmilj√∂inst√§llningar f√∂r Vite React + PostgreSQL

1. F√∂ruts√§ttningar och Installation
Node.js & npm

# Kontrollera att Node.js √§r installerat
node --version  # Should be 18+
npm --version   # Should be 9+

# Om Node.js saknas, ladda ner fr√•n: https://nodejs.org/

PostgreSQL & pgAdmin 4

# Windows: Ladda ner fr√•n https://www.postgresql.org/download/windows/
# macOS: 
brew install postgresql
brew services start postgresql

# Linux (Ubuntu/Debian):
sudo apt update
sudo apt install postgresql postgresql-contrib

# Starta PostgreSQL
sudo systemctl start postgresql
sudo systemctl enable postgresql

2. PostgreSQL Konfiguration

Skapa databas och anv√§ndare

-- Logga in som postgres-anv√§ndare
sudo -u postgres psql

-- Skapa ny databas
CREATE DATABASE todo_db;

-- Skapa anv√§ndare
CREATE USER todo_user WITH PASSWORD 'securepassword123';

-- Ge privilegier
GRANT ALL PRIVILEGES ON DATABASE todo_db TO todo_user;

-- Anslut till databasen
\c todo_db

-- Skapa todos tabell
CREATE TABLE IF NOT EXISTS todos (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- L√§gg till exempeldata
INSERT INTO todos (title, description) VALUES 
('L√§r dig React', 'Studera React dokumentation'),
('Bygg Todo-app', 'Skapa en fullstack applikation'),
('Distribuera till Render', 'Publicera appen p√• Render');

-- Ge anv√§ndare r√§ttigheter till tabellen
GRANT ALL PRIVILEGES ON ALL TABLES IN SCHEMA public TO todo_user;
GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO todo_user;

-- Verifiera att allt fungerar
SELECT * FROM todos;

pgAdmin 4 Konfiguration
Starta pgAdmin 4

L√§gg till ny server:

Name: Local PostgreSQL

Host: localhost

Port: 5432

Username: todo_user

Password: securepassword123

Database: todo_db

3. Projektstruktur Setup
Skapa projektmapp

# Skapa huvudmapp
mkdir todo-app
cd todo-app

# Skapa backend och frontend mappar
mkdir backend frontend

4. Backend Konfiguration
G√• till backend mappen

cd backend

# Initiera Node.js projekt
npm init -y

package.json f√∂r backend

{
  "name": "todo-backend",
  "version": "1.0.0",
  "description": "Backend API for Todo app with PostgreSQL",
  "main": "server.js",
  "type": "module",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "db:init": "node database/init.js",
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "keywords": ["express", "postgresql", "api", "todo"],
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "cors": "^2.8.5",
    "pg": "^8.11.3",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1"
  }
}

Installera backend dependencies

# I backend-mappen
npm install express cors pg dotenv
npm install -D nodemon

npm install

.env fil f√∂r backend

# Database Configuration
DATABASE_URL=postgresql://todo_user:securepassword123@localhost:5432/todo_db

# Server Configuration
PORT=5000
NODE_ENV=development

# CORS Configuration
CLIENT_URL=http://localhost:5173

5. Frontend Konfiguration med Vite React

cd ../frontend

Skapa Vite React projekt

npm create vite@latest . -- --template react

package.json f√∂r frontend

{
  "name": "todo-frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint . --ext js,jsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "@types/react": "^18.2.15",
    "@types/react-dom": "^18.2.7",
    "@vitejs/plugin-react": "^4.0.3",
    "eslint": "^8.45.0",
    "eslint-plugin-react": "^7.32.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.3",
    "vite": "^4.4.5"
  }
}

Installera frontend dependencies

npm install

vite.config.js

import { defineConfig, loadEnv } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig(({ mode }) => {
  const env = loadEnv(mode, process.cwd(), '')
  
  return {
    plugins: [react()],
    server: {
      port: 5173,
      proxy: {
        '/api': {
          target: env.VITE_API_URL || 'http://localhost:5000',
          changeOrigin: true,
          secure: false
        }
      }
    },
    build: {
      outDir: 'dist',
      sourcemap: true
    },
    define: {
      'process.env': {}
    }
  }
})

.env fil f√∂r frontend

# API Configuration
VITE_API_URL=http://localhost:5000

# App Configuration
VITE_APP_NAME=Todo App
VITE_APP_VERSION=1.0.0

6. Development Scripts
package.json i root (valfritt)
Skapa en package.json i root-mappen f√∂r enklare script-k√∂rning:

{
  "name": "todo-fullstack-app",
  "version": "1.0.0",
  "description": "Fullstack Todo app with React and PostgreSQL",
  "scripts": {
    "dev:backend": "cd backend && npm run dev",
    "dev:frontend": "cd frontend && npm run dev",
    "install:all": "cd backend && npm install && cd ../frontend && npm install",
    "build:frontend": "cd frontend && npm run build",
    "start:backend": "cd backend && npm start"
  },
  "keywords": ["react", "postgresql", "express", "vite"],
  "author": "Your Name",
  "license": "MIT"
}

7. Starta utvecklingsmilj√∂n
Terminal 1 - Backend

cd backend
npm run dev

F√∂rv√§ntad output:

Server running on port 5000
Database connected successfully

Terminal 2 - Frontend

cd frontend
npm run dev

F√∂rv√§ntad output:

  VITE v4.4.5  ready in 327 ms

  ‚ûú  Local:   http://localhost:5173/
  ‚ûú  Network: use --host to expose

  8. Testa installationen

  Testa backend API

  curl http://localhost:5000/api/todos

  F√∂rv√§ntat svar:

  [
  {
    "id": 1,
    "title": "L√§r dig React",
    "description": "Studera React dokumentation",
    "completed": false,
    "created_at": "2023-12-01T10:00:00.000Z",
    "updated_at": "2023-12-01T10:00:00.000Z"
  }
]

Testa frontend
√ñppna webbl√§sare och g√• till: http://localhost:5173

9. Ytterligare konfigurationsfiler
.gitignore f√∂r hela projektet


gitignore

# Dependencies
node_modules/
*/node_modules/

# Environment variables
.env
.env.local
.env.production

# Logs
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Build outputs
dist/
build/
*.tgz

# Database
*.db
*.sqlite

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

ESLint konfiguration (frontend/.eslintrc.cjs)


module.exports = {
  root: true,
  env: { browser: true, es2020: true },
  extends: [
    'eslint:recommended',
    '@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
  ],
  ignorePatterns: ['dist', '.eslintrc.cjs'],
  parser: '@typescript-eslint/parser',
  plugins: ['react-refresh'],
  rules: {
    'react-refresh/only-export-components': [
      'warn',
      { allowConstantExport: true },
    ],
    'indent': ['error', 2],
    'quotes': ['error', 'single'],
    'semi': ['error', 'always']
  },
}

10. Fels√∂kningstips
Vanliga problem och l√∂sningar:
Database connection error:

# Kontrollera att PostgreSQL k√∂rs
sudo systemctl status postgresql

# Testa connection
psql -U todo_user -d todo_db -h localhost

Port redan anv√§nd:

# Hitta process som anv√§nder porten
lsof -i :5000
lsof -i :5173

# D√∂da processen
kill -9 <PID>

CORS errors:

Kontrollera backend CORS konfiguration

Verifiera att CLIENT_URL √§r korrekt i .env

Module not found:

# Reinstallera dependencies
rm -rf node_modules package-lock.json
npm install

Verifiera att allt fungerar:

# 1. Database
psql -U todo_user -d todo_db -c "SELECT version(); SELECT * FROM todos;"

# 2. Backend API
curl http://localhost:5000/api/todos

# 3. Frontend development server
curl http://localhost:5173

Denna konfiguration ger en komplett arbetsmilj√∂ f√∂r att utveckla fullstack Todo-appen med Vite React och PostgreSQL!

7. K√∂r hela setup-processen korrekt

# 1. Skapa projektstruktur
mkdir todo-app
cd todo-app
mkdir backend frontend

# 2. Setup Backend
cd backend
npm init -y
npm install express cors pg dotenv
npm install -D nodemon

# Skapa filerna (server.js, .env, etc.)
# ...

# 3. Initiera databasen
npm run db:init

# 4. Starta backend
npm run dev

# 5. I ny terminal - Setup Frontend
cd ../frontend
npm create vite@latest . -- --template react
npm install

# 6. Starta frontend
npm run dev

8. Testa att allt fungerar

# Testa backend API
curl http://localhost:5000/api/health
curl http://localhost:5000/api/todos

# Testa att skapa en todo
curl -X POST http://localhost:5000/api/todos \
  -H "Content-Type: application/json" \
  -d '{"title":"Test todo","description":"This is a test"}'


1. Skapa databasen i PostgreSQL
Skriv dessa kommandon i PostgreSQL (en i taget):

  psql -U postgres


CREATE DATABASE todo_db;

\c todo_db


CREATE TABLE todos (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);


INSERT INTO todos (title, description) VALUES 
('L√§r dig React', 'Studera React dokumentation'),
('Bygg Todo-app', 'Skapa en fullstack applikation'),
('Distribuera till Render', 'Publicera appen p√• Render');

SELECT * FROM todos;

2. Avsluta PostgreSQL

\q

3. Starta backend nu

cd todo-app/backend
node server.js

Nu ska du se:

üöÄ Server running on port 5000
‚úÖ PostgreSQL connected successfully

4. Testa API
√ñppna webbl√§sare till: http://localhost:5000/api/todos

Du ska se dina 3 todos i JSON-format.

5. Starta frontend
√ñppna ny PowerShell och k√∂r:

cd todo-app/frontend
npm run dev

G√• till: http://localhost:5173

1. L√∂sning 1: Skapa databasen med UTF-8 encoding
Steg 1: Ta bort den nuvarande databasen
√ñppna pgAdmin ‚Üí H√∂gerklicka p√• todo_db ‚Üí Delete/Drop

Steg 2: Skapa ny databas med r√§tt encoding
K√∂r detta SQL i Query Tool:

CREATE DATABASE todo_db 
WITH 
ENCODING = 'UTF8'
LC_COLLATE = 'sv_SE.UTF-8' 
LC_CTYPE = 'sv_SE.UTF-8'
TEMPLATE = template0;

2. L√∂sning 2: Anv√§nd explicit UTF-8 i connection
Uppdatera din backend/server.js - l√§gg till charset:

const pool = new Pool({
  user: process.env.DB_USER,
  host: process.env.DB_HOST,
  database: process.env.DB_NAME,
  password: process.env.DB_PASSWORD,
  port: process.env.DB_PORT,
  max: 20,
  idleTimeoutMillis: 30000,
  connectionTimeoutMillis: 2000,
  // L√§gg till charset f√∂r UTF-8
  client_encoding: 'UTF8'
});


3. L√∂sning 3: Uppdatera init.js f√∂r UTF-8
Uppdatera din database/init.js:

const initDatabase = async () => {
  try {
    await client.connect();
    console.log('Connected to PostgreSQL');

    // Skapa databas med UTF-8 encoding
    await client.query(`
      CREATE DATABASE todo_db 
      WITH 
      ENCODING = 'UTF8'
      LC_COLLATE = 'sv_SE.UTF-8' 
      LC_CTYPE = 'sv_SE.UTF-8'
      TEMPLATE = template0
    `);

    console.log('UTF-8 database created');

    // Resten av koden...


    4. Snabb-fix: Uppdatera befintliga data
Om du vill beh√•lla nuvarande databas, k√∂r detta SQL f√∂r att fixa tecknen:

-- Uppdatera de felaktiga titlarna
UPDATE todos SET title = 'L√§r dig React' WHERE title LIKE 'L,r dig React%';
UPDATE todos SET title = 'Distribuera till Render' WHERE title LIKE 'Distribuera till Render%';

-- Verifiera
SELECT * FROM todos;

5. Testa med ny data
L√§gg till en ny todo via webbgr√§nssnittet med svenska tecken och se om det fungerar.

6. Alternativ l√∂sning f√∂r Windows
P√• Windows kan du beh√∂va anv√§nda:

CREATE DATABASE todo_db 
WITH 
ENCODING = 'UTF8'
LC_COLLATE = 'Swedish_Sweden.1252' 
LC_CTYPE = 'Swedish_Sweden.1252'
TEMPLATE = template0;

7. Rekommenderad approach
Ta bort nuvarande todo_db

Skapa ny med UTF-8 encoding (anv√§nd SQL ovan)

K√∂r init.js igen eller skapa tabell manuellt

Testa med svenska tecken

8. Skapa tabell och data p√• nytt
Efter att du skapat databasen med UTF-8, k√∂r:

CREATE TABLE IF NOT EXISTS todos (
    id SERIAL PRIMARY KEY,
    title VARCHAR(255) NOT NULL,
    description TEXT,
    completed BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

INSERT INTO todos (title, description) VALUES 
('L√§r dig React', 'Studera React dokumentation'),
('Bygg Todo-app', 'Skapa en fullstack applikation'),
('Distribuera till Render', 'Publicera appen p√• Render');

SELECT * FROM todos;


1. Skapa mappen och filen
Steg 1: Skapa database mappen

cd backend
mkdir database

Steg 2: Skapa init.js filen i database mappen
Skapa en fil som heter init.js i backend/database/ mappen med den h√§r koden:

backend/database/init.js

import pkg from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const { Client } = pkg;

const initDatabase = async () => {
  let client;
  let todoClient;
  
  try {
    client = new Client({
      user: process.env.DB_USER,
      host: process.env.DB_HOST,
      database: 'postgres',
      password: process.env.DB_PASSWORD,
      port: process.env.DB_PORT,
    });

    await client.connect();
    console.log('Connected to PostgreSQL');

    // Kontrollera om databasen redan finns
    const dbCheck = await client.query(`
      SELECT 1 FROM pg_database WHERE datname = 'todo_db'
    `);

    if (dbCheck.rows.length > 0) {
      console.log('Database already exists, dropping...');
      // Koppla bort alla anslutningar f√∂rst
      await client.query(`
        SELECT pg_terminate_backend(pid) 
        FROM pg_stat_activity 
        WHERE datname = 'todo_db' AND pid <> pg_backend_pid()
      `);
      await client.query('DROP DATABASE todo_db');
    }

    // Skapa databas
    await client.query('CREATE DATABASE todo_db');
    console.log('Database created successfully');

    await client.end();

    // Anslut till den nya databasen
    todoClient = new Client({
      user: process.env.DB_USER,
      host: process.env.DB_HOST,
      database: 'todo_db',
      password: process.env.DB_PASSWORD,
      port: process.env.DB_PORT,
    });

    await todoClient.connect();
    console.log('Connected to todo_db');

    // Skapa tabell
    await todoClient.query(`
      CREATE TABLE IF NOT EXISTS todos (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        completed BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    `);

    // L√§gg till data med svenska tecken
    await todoClient.query(`
      INSERT INTO todos (title, description) 
      VALUES 
        ($1, $2),
        ($3, $4),
        ($5, $6)
    `, [
      'L√§r dig React', 
      'Studera React dokumentation',
      'Bygg Todo-app', 
      'Skapa en fullstack applikation',
      'Distribuera till Render', 
      'Publicera appen p√• Render'
    ]);

    console.log('‚úÖ Database initialized successfully with Swedish characters');
    
    // Verifiera data
    const result = await todoClient.query('SELECT * FROM todos');
    console.log('Sample data:');
    result.rows.forEach(row => {
      console.log(`- ${row.title}: ${row.description}`);
    });
    
  } catch (error) {
    console.error('‚ùå Database initialization error:', error);
  } finally {
    // St√§ng alltid connections
    if (todoClient) {
      await todoClient.end();
      console.log('Todo client connection closed');
    }
    if (client) {
      await client.end();
      console.log('Main client connection closed');
    }
    process.exit(0);
  }
};

initDatabase();

2. Kontrollera din mappstruktur
Efter att du skapat filen ska din struktur se ut s√• h√§r:

backend/
‚îú‚îÄ‚îÄ database/
‚îÇ   ‚îî‚îÄ‚îÄ init.js          ‚Üê DENNA FIL SKAPAS!
‚îú‚îÄ‚îÄ .env
‚îú‚îÄ‚îÄ server.js
‚îî‚îÄ‚îÄ package.json

3. K√∂r init scriptet igen

cd backend
npm run db:init

4. Alternativ: Skapa filen med PowerShell
Om du vill skapa filen direkt fr√•n PowerShell:

cd backend

# Skapa database mappen om den inte finns
if (!(Test-Path "database")) {
    New-Item -ItemType Directory -Path "database"
}

# Skapa init.js filen
@"
import pkg from 'pg';
import dotenv from 'dotenv';

dotenv.config();

const { Client } = pkg;

const initDatabase = async () => {
  let client;
  let todoClient;
  
  try {
    client = new Client({
      user: process.env.DB_USER,
      host: process.env.DB_HOST,
      database: 'postgres',
      password: process.env.DB_PASSWORD,
      port: process.env.DB_PORT,
    });

    await client.connect();
    console.log('Connected to PostgreSQL');

    // Kontrollera om databasen redan finns
    const dbCheck = await client.query(\`
      SELECT 1 FROM pg_database WHERE datname = 'todo_db'
    \`);

    if (dbCheck.rows.length > 0) {
      console.log('Database already exists, dropping...');
      await client.query('DROP DATABASE todo_db');
    }

    // Skapa databas
    await client.query('CREATE DATABASE todo_db');
    console.log('Database created successfully');

    await client.end();

    // Anslut till den nya databasen
    todoClient = new Client({
      user: process.env.DB_USER,
      host: process.env.DB_HOST,
      database: 'todo_db',
      password: process.env.DB_PASSWORD,
      port: process.env.DB_PORT,
    });

    await todoClient.connect();
    console.log('Connected to todo_db');

    // Skapa tabell
    await todoClient.query(\`
      CREATE TABLE IF NOT EXISTS todos (
        id SERIAL PRIMARY KEY,
        title VARCHAR(255) NOT NULL,
        description TEXT,
        completed BOOLEAN DEFAULT FALSE,
        created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
        updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
      )
    \`);

    // L√§gg till data
    await todoClient.query(\`
      INSERT INTO todos (title, description) 
      VALUES 
        ('L√§r dig React', 'Studera React dokumentation'),
        ('Bygg Todo-app', 'Skapa en fullstack applikation'),
        ('Distribuera till Render', 'Publicera appen p√• Render')
    \`);

    console.log('‚úÖ Database initialized successfully');
    
  } catch (error) {
    console.error('‚ùå Database initialization error:', error);
  } finally {
    if (todoClient) await todoClient.end();
    if (client) await client.end();
  }
};

initDatabase();
"@ | Out-File -FilePath "database/init.js" -Encoding UTF8

5. Testa efter init
Efter att npm run db:init har k√∂rts:

Starta backend:

node server.js

Testa API:et:
√ñppna http://localhost:5000/api/todos

Kontrollera i pgAdmin att datan ser korrekt ut med svenska tecken.

Skapa filen och k√∂r sedan npm run db:init igen! üöÄ