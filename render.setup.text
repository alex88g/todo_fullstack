Skapa PostgreSQL Database p√• Render

Steg 1: G√• till Render.com
Logga in/skapa konto p√• render.com

Klicka "New +" ‚Üí "PostgreSQL"

Steg 2: Konfigurera databasen
Name: todo-db

Database: todo_db (l√§gg m√§rke till skillnaden i namn)

User: todo_user

Region: "Frankfurt (EU Central)" (n√§rmast Sverige)

Plan: Free (f√∂r test)

Klicka "Create PostgreSQL"

Steg 3: Spara connection string
G√• till din nya databas p√• Render

Klicka p√• "Connect"

SPARA "External Database URL" - du beh√∂ver den senare!

3. Deploy Backend till Render
Steg 1: Skapa Web Service
Klicka "New +" ‚Üí "Web Service"

Anslut till ditt GitHub repo

Steg 2: Konfigurera Backend
Name: todo-backend (eller vad du vill)

Environment: Node

Region: Frankfurt (samma som databasen)

Branch: main (eller master)

Root Directory: backend

Build Command: npm install

Start Command: npm start

Steg 3: Environment Variables f√∂r Backend
L√§gg till dessa milj√∂variabler:


NODE_ENV = production
DATABASE_URL = din_externa_database_url_fr√•n_steg_2
CLIENT_URL = https://your-frontend-app.onrender.com
Steg 4: Deploy
Klicka "Create Web Service"

4. Deploy Frontend till Render
Steg 1: Skapa Static Site
Klicka "New +" ‚Üí "Static Site"

Anslut till samma GitHub repo

Steg 2: Konfigurera Frontend
Name: todo-frontend

Branch: main (eller master)

Root Directory: frontend

Build Command: npm run build

Publish Directory: dist

Steg 3: Environment Variables f√∂r Frontend

VITE_API_URL = https://your-backend-app.onrender.com
Steg 4: Deploy
Klicka "Create Static Site"

5. Initiera databasen p√• Render
N√§r backend √§r uppe, initiera databasen:

Metod 1: Anv√§nd Render Shell
G√• till din backend service p√• Render

Klicka "Shell"

K√∂r: node database/init.js

Metod 2: Skapa en init route
L√§gg till detta i backend/server.js:

// Init route f√∂r databasen
app.post('/api/init-db', async (req, res) => {
  try {
    // Importera och k√∂r init script
    const { initDatabase } = await import('./database/init.js');
    await initDatabase();
    res.json({ success: true, message: 'Database initialized' });
  } catch (error) {
    res.status(500).json({ success: false, error: error.message });
  }
});

Sedan anv√§nd curl eller Postman:

curl -X POST https://your-backend.onrender.com/api/init-db

6. Uppdatera package.json f√∂r Production
backend/package.json - se till att scripts ser ut s√• h√§r:

{
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "db:init": "node database/init.js"
  }
}

7. Final Checklista
Innan deploy:
Backend fungerar lokalt

Frontend fungerar lokalt

All kod √§r pushat till GitHub

DATABASE_URL fr√•n Render √§r sparad

init.js finns i backend/database/

Efter deploy:
Backend health check: https://your-backend.onrender.com/api/health

Initiera databasen

Testa API: https://your-backend.onrender.com/api/todos

Testa frontend: https://your-frontend.onrender.com

8. Troubleshooting
Vanliga problem:
CORS error: Uppdatera CLIENT_URL i backend environment variables

Database connection failed: Kontrollera DATABASE_URL √§r korrekt

Frontend visar inte data: Kontrollera VITE_API_URL i frontend

Static site visar blank page: L√§gg till _redirects fil i frontend/public:

/*    /index.html   200

9. Live URLs
N√§r allt √§r klart kommer du ha:

Frontend: https://todo-frontend.onrender.com

Backend: https://todo-backend.onrender.com

Database: Render PostgreSQL

Rekommendation: Deploya backend f√∂rst, initiera databasen, sedan frontend! üöÄ